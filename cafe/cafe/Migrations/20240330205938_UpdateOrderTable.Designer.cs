// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cafe.infrastructure;

#nullable disable

namespace cafe.Migrations
{
    [DbContext(typeof(CafeDbContext))]
    [Migration("20240330205938_UpdateOrderTable")]
    partial class UpdateOrderTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1",
                            Name = "Acountent",
                            NormalizedName = "Acountent"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Cashier",
                            NormalizedName = "Cashier"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("cafe.Domain.Category.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catgeories");
                });

            modelBuilder.Entity("cafe.Domain.Client.Entity.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("cafe.Domain.Employee.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseSalary")
                        .HasColumnType("int");

                    b.Property<string>("DeliverdPapers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("cafe.Domain.Employee.SalaryItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasMaxLength(256)
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalaryItemEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SalaryItemEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("cafe.Domain.Event.Entity.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CheckOut")
                        .HasColumnType("bit");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RservationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("cafe.Domain.Meal.MealEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryEntityId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("cafe.Domain.Order.Entity.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GuestReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTakeAway")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("ShiftEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftEntityId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("cafe.Domain.Order.Entity.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("OrderEntityId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("cafe.Domain.Shift.Entity.ShiftEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("cafe.Domain.Table.Entity.TableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("LobbyName")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "1"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "2"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "3"
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "4"
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "5"
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "6"
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "7"
                        },
                        new
                        {
                            Id = 8,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "8"
                        },
                        new
                        {
                            Id = 9,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "9"
                        },
                        new
                        {
                            Id = 10,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "10"
                        },
                        new
                        {
                            Id = 11,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "11"
                        },
                        new
                        {
                            Id = 12,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "12"
                        },
                        new
                        {
                            Id = 13,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "13"
                        },
                        new
                        {
                            Id = 14,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "14"
                        },
                        new
                        {
                            Id = 15,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "15"
                        },
                        new
                        {
                            Id = 16,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "16"
                        },
                        new
                        {
                            Id = 17,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "17"
                        },
                        new
                        {
                            Id = 18,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "18"
                        },
                        new
                        {
                            Id = 19,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "19"
                        },
                        new
                        {
                            Id = 20,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "20"
                        },
                        new
                        {
                            Id = 21,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "21"
                        },
                        new
                        {
                            Id = 22,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "22"
                        },
                        new
                        {
                            Id = 23,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "23"
                        },
                        new
                        {
                            Id = 24,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "24"
                        },
                        new
                        {
                            Id = 25,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "25"
                        },
                        new
                        {
                            Id = 26,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "26"
                        },
                        new
                        {
                            Id = 27,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "27"
                        },
                        new
                        {
                            Id = 28,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "28"
                        },
                        new
                        {
                            Id = 29,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "29"
                        },
                        new
                        {
                            Id = 30,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "30"
                        },
                        new
                        {
                            Id = 31,
                            Deleted = false,
                            LobbyName = 0,
                            Name = "31"
                        },
                        new
                        {
                            Id = 32,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "32"
                        },
                        new
                        {
                            Id = 33,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "33"
                        },
                        new
                        {
                            Id = 34,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "34"
                        },
                        new
                        {
                            Id = 35,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "35"
                        },
                        new
                        {
                            Id = 36,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "36"
                        },
                        new
                        {
                            Id = 37,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "37"
                        },
                        new
                        {
                            Id = 38,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "38"
                        },
                        new
                        {
                            Id = 39,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "39"
                        },
                        new
                        {
                            Id = 40,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "40"
                        },
                        new
                        {
                            Id = 41,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "41"
                        },
                        new
                        {
                            Id = 42,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "42"
                        },
                        new
                        {
                            Id = 43,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "43"
                        },
                        new
                        {
                            Id = 44,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "44"
                        },
                        new
                        {
                            Id = 45,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "45"
                        },
                        new
                        {
                            Id = 46,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "46"
                        },
                        new
                        {
                            Id = 47,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "47"
                        },
                        new
                        {
                            Id = 48,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "48"
                        },
                        new
                        {
                            Id = 49,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "49"
                        },
                        new
                        {
                            Id = 50,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "50"
                        },
                        new
                        {
                            Id = 51,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "51"
                        },
                        new
                        {
                            Id = 52,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "52"
                        },
                        new
                        {
                            Id = 53,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "53"
                        },
                        new
                        {
                            Id = 54,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "54"
                        },
                        new
                        {
                            Id = 55,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "55"
                        },
                        new
                        {
                            Id = 56,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "56"
                        },
                        new
                        {
                            Id = 57,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "57"
                        },
                        new
                        {
                            Id = 58,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "58"
                        },
                        new
                        {
                            Id = 59,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "59"
                        },
                        new
                        {
                            Id = 60,
                            Deleted = false,
                            LobbyName = 1,
                            Name = "60"
                        });
                });

            modelBuilder.Entity("cafe.Domain.Transaction.Entity.TransactionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("TransactionsEntity");
                });

            modelBuilder.Entity("cafe.Domain.Users.entity.CafeUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("cafe.Domain.Employee.SalaryDeductionEntity", b =>
                {
                    b.HasBaseType("cafe.Domain.Employee.SalaryItemEntity");

                    b.Property<int?>("EmployeeEntityId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeEntityId");

                    b.ToTable("SalaryItemEntity", t =>
                        {
                            t.Property("EmployeeEntityId")
                                .HasColumnName("SalaryDeductionEntity_EmployeeEntityId");
                        });

                    b.HasDiscriminator().HasValue("SalaryDeduction");
                });

            modelBuilder.Entity("cafe.Domain.Employee.SalaryIncentiveEntity", b =>
                {
                    b.HasBaseType("cafe.Domain.Employee.SalaryItemEntity");

                    b.Property<int?>("EmployeeEntityId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeEntityId");

                    b.HasDiscriminator().HasValue("SalaryIncentive");
                });

            modelBuilder.Entity("cafe.Domain.Employee.entity.PayAdvance", b =>
                {
                    b.HasBaseType("cafe.Domain.Employee.SalaryItemEntity");

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeEntityId")
                        .HasColumnType("int");

                    b.HasIndex("EmployeeEntityId");

                    b.ToTable("SalaryItemEntity", t =>
                        {
                            t.Property("EmployeeEntityId")
                                .HasColumnName("PayAdvance_EmployeeEntityId");
                        });

                    b.HasDiscriminator().HasValue("PayAdvance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cafe.Domain.Users.entity.CafeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cafe.Domain.Users.entity.CafeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cafe.Domain.Users.entity.CafeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cafe.Domain.Users.entity.CafeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cafe.Domain.Meal.MealEntity", b =>
                {
                    b.HasOne("cafe.Domain.Category.CategoryEntity", null)
                        .WithMany("Meals")
                        .HasForeignKey("CategoryEntityId");
                });

            modelBuilder.Entity("cafe.Domain.Order.Entity.OrderEntity", b =>
                {
                    b.HasOne("cafe.Domain.Shift.Entity.ShiftEntity", "ShiftEntity")
                        .WithMany("Orders")
                        .HasForeignKey("ShiftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cafe.Domain.Table.Entity.TableEntity", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId");

                    b.Navigation("ShiftEntity");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("cafe.Domain.Order.Entity.OrderItemEntity", b =>
                {
                    b.HasOne("cafe.Domain.Meal.MealEntity", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId");

                    b.HasOne("cafe.Domain.Order.Entity.OrderEntity", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderEntityId");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("cafe.Domain.Table.Entity.TableEntity", b =>
                {
                    b.HasOne("cafe.Domain.Client.Entity.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("cafe.Domain.Transaction.Entity.TransactionEntity", b =>
                {
                    b.HasOne("cafe.Domain.Shift.Entity.ShiftEntity", "Shift")
                        .WithMany("Transactions")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("cafe.Domain.Employee.SalaryDeductionEntity", b =>
                {
                    b.HasOne("cafe.Domain.Employee.EmployeeEntity", null)
                        .WithMany("Deductions")
                        .HasForeignKey("EmployeeEntityId");
                });

            modelBuilder.Entity("cafe.Domain.Employee.SalaryIncentiveEntity", b =>
                {
                    b.HasOne("cafe.Domain.Employee.EmployeeEntity", null)
                        .WithMany("Incentive")
                        .HasForeignKey("EmployeeEntityId");
                });

            modelBuilder.Entity("cafe.Domain.Employee.entity.PayAdvance", b =>
                {
                    b.HasOne("cafe.Domain.Employee.EmployeeEntity", null)
                        .WithMany("Advance")
                        .HasForeignKey("EmployeeEntityId");
                });

            modelBuilder.Entity("cafe.Domain.Category.CategoryEntity", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("cafe.Domain.Employee.EmployeeEntity", b =>
                {
                    b.Navigation("Advance");

                    b.Navigation("Deductions");

                    b.Navigation("Incentive");
                });

            modelBuilder.Entity("cafe.Domain.Order.Entity.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("cafe.Domain.Shift.Entity.ShiftEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("cafe.Domain.Table.Entity.TableEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
